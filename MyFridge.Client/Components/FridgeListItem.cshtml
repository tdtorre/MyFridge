@using MyFridge.Shared
@inject Services.AppState state
@inherits FridgeListItemModel

<li class="list-group-item d-flex justify-content-between align-items-center @(this.Item.IsActive ? "active" : string.Empty)" onclick="@ActiveItem">
    @Item.Name
    <span class="badge badge-primary badge-pill">@Item.Quantity</span>
</li>
<li class="buttonActions @(this.Item.IsActive ? "active" : string.Empty) @(this.Item.IsActive ? string.Empty : "d-none")">
    <div class="list-group-buttons">
        <button type="button" class="btn btn-sm btn-secondary textIcon" onclick="@IncreaseQuantity">+</button>
        <button type="button" class="btn btn-sm btn-secondary textIcon" onclick="@DecreaseQuantity">-</button>
        <button type="button" class="btn btn-sm btn-secondary" onclick="@(() => OnRemoveItem(this.Item))">Remove</button>
        <button type="button" class="btn btn-sm btn-secondary" onclick="@(() => OnAddToShoppingList(this.Item))">Add to shopping list</button>
    </div>
</li>

@functions{
    [Parameter]
    private FridgeItem Item { get; set; }

    [Parameter]
    private Action<FridgeItem> OnRemoveItem { get; set; }

    [Parameter]
    private Action<FridgeItem> OnAddToShoppingList { get; set; }

    private string IsActiveItem()
    {
        return this.Item.IsActive ? "active" : string.Empty;
    }

    private string ShowButtons()
    {
        return this.Item.IsActive ? string.Empty : "hidden";
    }

    private void ActiveItem()
    {
        this.Item.IsActive = !this.Item.IsActive;
    }

    private void IncreaseQuantity()
    {
        this.Item.Quantity++;
    }

    private void DecreaseQuantity()
    {
        if (this.Item.Quantity > 0)
        {
            this.Item.Quantity--;
        }
    }
}