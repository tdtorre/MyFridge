@using MyFridge.Shared
@inject Services.AppState state
@inherits FridgeListItemModel

<li class="list-group-item d-flex justify-content-between align-items-center @(this.Item.IsActive ? "active" : string.Empty)" onclick="@ActiveItem">
    @Item.Name
    <div>
        <span class="oi oi-warning  @(this.Item.Quantity < 2 ? string.Empty : "d-none")" aria-hidden="true"></span> 
        <span class="badge badge-primary badge-pill">@Item.Quantity</span>
    </div>
</li>
<li class="buttonActions @(this.Item.IsActive ? "active" : string.Empty) @(this.Item.IsActive ? string.Empty : "d-none")">
    <div class="list-group-buttons">
        <button type="button" class="btn btn-sm btn-secondary textIcon" onclick="@IncreaseQuantity">+</button>
        <button type="button" class="btn btn-sm btn-secondary textIcon" onclick="@DecreaseQuantity">-</button>
        <button type="button" class="btn btn-sm btn-secondary" onclick="@(() => state.RemoveFromFridgelist(this.Item))">Remove</button>
        <button type="button" class="btn btn-sm btn-secondary" onclick="@AddToShoppingList">Add to shopping list</button>
    </div>
</li>

@functions{
    [Parameter]
    private FridgeItem Item { get; set; }

    private string IsActiveItem()
    {
        return this.Item.IsActive ? "active" : string.Empty;
    }

    private void ActiveItem()
    {
        this.Item.IsActive = !this.Item.IsActive;

        if (!this.Item.IsActive)
        {
            state.UpdateFridgeListItem(this.Item).ConfigureAwait(false);
        }
    }

    private void AddToShoppingList()
    {
        this.Item.IsActive = !this.Item.IsActive;
        state.AddToShoppingList(this.Item.Name).ConfigureAwait(false);
    }

    private void IncreaseQuantity()
    {
        this.Item.Quantity++;
    }

    private void DecreaseQuantity()
    {
        if (this.Item.Quantity > 0)
        {
            this.Item.Quantity--;
        }
    }
}